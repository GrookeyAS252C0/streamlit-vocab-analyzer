#!/usr/bin/env python3
"""
レポート生成ユーティリティ
分析結果を様々な形式で出力
"""

import json
import logging
from typing import Dict, List, Optional
from pathlib import Path
import datetime
from dataclasses import dataclass
import pandas as pd

logger = logging.getLogger(__name__)

@dataclass
class ReportConfig:
    """レポート設定"""
    title: str = "ReadingAssist Analysis Report"
    author: str = "ReadingAssist Analyzer"
    include_charts: bool = True
    include_raw_data: bool = False
    format: str = "html"  # html, json, csv, txt

class ReportGenerator:
    """レポート生成クラス"""
    
    def __init__(self, config: ReportConfig = None):
        """
        初期化
        
        Args:
            config: レポート設定
        """
        self.config = config or ReportConfig()
    
    def generate_comprehensive_report(
        self, 
        analysis_result: Dict, 
        output_path: str
    ) -> bool:
        """
        総合分析レポートの生成
        
        Args:
            analysis_result: 分析結果
            output_path: 出力パス
            
        Returns:
            生成成功フラグ
        """
        try:
            output_path = Path(output_path)
            output_path.parent.mkdir(parents=True, exist_ok=True)
            
            if self.config.format == "html":
                return self._generate_html_report(analysis_result, output_path)
            elif self.config.format == "json":
                return self._generate_json_report(analysis_result, output_path)
            elif self.config.format == "csv":
                return self._generate_csv_report(analysis_result, output_path)
            elif self.config.format == "txt":
                return self._generate_text_report(analysis_result, output_path)
            else:
                logger.error(f"サポートされていない形式: {self.config.format}")
                return False
                
        except Exception as e:
            logger.error(f"レポート生成エラー: {e}")
            return False
    
    def _generate_html_report(self, analysis_result: Dict, output_path: Path) -> bool:
        """HTMLレポートの生成"""
        try:
            html_content = self._create_html_template(analysis_result)
            
            with open(output_path.with_suffix('.html'), 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            logger.info(f"HTMLレポートを生成しました: {output_path.with_suffix('.html')}")
            return True
            
        except Exception as e:
            logger.error(f"HTMLレポート生成エラー: {e}")
            return False
    
    def _create_html_template(self, analysis_result: Dict) -> str:
        """HTMLテンプレートの作成"""
        
        # 基本情報の取得
        metadata = analysis_result.get('metadata', {})
        assessment = analysis_result.get('comprehensive_assessment', {})
        report = analysis_result.get('integrated_report', {})
        
        timestamp = metadata.get('analysis_timestamp', datetime.datetime.now().isoformat())
        
        html_content = f"""
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{self.config.title}</title>
    <style>
        {self._get_css_styles()}
    </style>
</head>
<body>
    <div class="container">
        <header class="report-header">
            <h1>📚 {self.config.title}</h1>
            <p class="subtitle">英文読解における総合分析レポート</p>
            <div class="metadata">
                <p><strong>生成日時:</strong> {timestamp}</p>
                <p><strong>作成者:</strong> {self.config.author}</p>
            </div>
        </header>
        
        <main>
            {self._create_executive_summary_section(assessment, report)}
            {self._create_detailed_analysis_section(analysis_result)}
            {self._create_recommendations_section(report)}
            {self._create_action_plan_section(report)}
        </main>
        
        <footer class="report-footer">
            <p>Generated by ReadingAssist Analyzer v1.0.0</p>
        </footer>
    </div>
</body>
</html>
"""
        return html_content
    
    def _get_css_styles(self) -> str:
        """CSSスタイルの取得"""
        return """
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
        }
        
        .container {
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .report-header {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .report-header h1 {
            margin: 0 0 10px 0;
            font-size: 2.5em;
        }
        
        .subtitle {
            font-size: 1.2em;
            margin: 10px 0;
            opacity: 0.9;
        }
        
        .metadata {
            margin-top: 20px;
            font-size: 0.9em;
            opacity: 0.8;
        }
        
        main {
            padding: 30px;
        }
        
        .section {
            margin-bottom: 40px;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #4CAF50;
            background: #f8f9fa;
        }
        
        .section h2 {
            color: #2c3e50;
            margin-top: 0;
            font-size: 1.8em;
        }
        
        .metric-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .metric-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            text-align: center;
        }
        
        .metric-value {
            font-size: 2em;
            font-weight: bold;
            color: #4CAF50;
            margin: 10px 0;
        }
        
        .metric-label {
            color: #666;
            font-size: 0.9em;
        }
        
        .challenge-box {
            background: #fff3cd;
            border-left: 4px solid #ffc107;
            padding: 15px;
            margin: 10px 0;
            border-radius: 4px;
        }
        
        .recommendation-box {
            background: #d4edda;
            border-left: 4px solid #28a745;
            padding: 15px;
            margin: 10px 0;
            border-radius: 4px;
        }
        
        .data-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        
        .data-table th,
        .data-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        .data-table th {
            background: #4CAF50;
            color: white;
        }
        
        .data-table tr:nth-child(even) {
            background: #f2f2f2;
        }
        
        .report-footer {
            background: #2c3e50;
            color: white;
            text-align: center;
            padding: 20px;
            font-size: 0.9em;
        }
        
        ul.recommendation-list {
            list-style-type: none;
            padding: 0;
        }
        
        ul.recommendation-list li {
            margin: 10px 0;
            padding: 10px;
            background: white;
            border-radius: 4px;
            border-left: 3px solid #4CAF50;
        }
        
        .highlight {
            background: #fff176;
            padding: 2px 4px;
            border-radius: 2px;
        }
        """
    
    def _create_executive_summary_section(self, assessment: Dict, report: Dict) -> str:
        """エグゼクティブサマリーセクションの作成"""
        executive_summary = report.get('executive_summary', {})
        
        return f"""
        <section class="section">
            <h2>📊 エグゼクティブサマリー</h2>
            <div class="metric-grid">
                <div class="metric-card">
                    <div class="metric-label">総合難易度</div>
                    <div class="metric-value">{assessment.get('difficulty_level', '不明')}</div>
                </div>
                <div class="metric-card">
                    <div class="metric-label">読解レベル</div>
                    <div class="metric-value">{assessment.get('reading_level', '不明')}</div>
                </div>
                <div class="metric-card">
                    <div class="metric-label">推定読解時間</div>
                    <div class="metric-value">{assessment.get('estimated_reading_time_minutes', 0)}分</div>
                </div>
                <div class="metric-card">
                    <div class="metric-label">総合スコア</div>
                    <div class="metric-value">{assessment.get('overall_difficulty_score', 0):.1f}</div>
                </div>
            </div>
            
            <h3>⚠️ 主要な学習課題</h3>
            {self._format_challenges(executive_summary.get('key_challenges', []))}
        </section>
        """
    
    def _create_detailed_analysis_section(self, analysis_result: Dict) -> str:
        """詳細分析セクションの作成"""
        vocab_analysis = analysis_result.get('vocabulary_analysis', {})
        grammar_analysis = analysis_result.get('grammar_analysis', {})
        sentence_analysis = analysis_result.get('sentence_analysis', {})
        
        return f"""
        <section class="section">
            <h2>🔍 詳細分析結果</h2>
            
            {self._create_vocabulary_subsection(vocab_analysis)}
            {self._create_grammar_subsection(grammar_analysis)}
            {self._create_sentence_subsection(sentence_analysis)}
        </section>
        """
    
    def _create_vocabulary_subsection(self, vocab_analysis: Dict) -> str:
        """語彙分析サブセクション"""
        if not vocab_analysis:
            return "<h3>📚 語彙分析</h3><p>語彙分析データがありません。</p>"
        
        summary = vocab_analysis.get('summary', {})
        coverage = vocab_analysis.get('vocabulary_coverage', {})
        
        # 単語帳カバレッジテーブル
        coverage_table = "<table class='data-table'><thead><tr><th>単語帳</th><th>語彙カバレッジ率(%)</th><th>単語帳使用率(%)</th><th>一致語数</th></tr></thead><tbody>"
        
        for book_name, data in coverage.items():
            coverage_table += f"""
            <tr>
                <td>{book_name}</td>
                <td>{data.get('vocabulary_coverage_rate', 0):.1f}%</td>
                <td>{data.get('vocabulary_utilization_rate', 0):.1f}%</td>
                <td>{data.get('matched_words_count', 0):,}</td>
            </tr>
            """
        
        coverage_table += "</tbody></table>"
        
        return f"""
        <h3>📚 語彙分析</h3>
        <div class="metric-grid">
            <div class="metric-card">
                <div class="metric-label">抽出総単語数</div>
                <div class="metric-value">{vocab_analysis.get('text_statistics', {}).get('total_words', 0):,}</div>
            </div>
            <div class="metric-card">
                <div class="metric-label">ユニーク単語数</div>
                <div class="metric-value">{vocab_analysis.get('text_statistics', {}).get('unique_words', 0):,}</div>
            </div>
            <div class="metric-card">
                <div class="metric-label">最適単語帳</div>
                <div class="metric-value">{summary.get('best_coverage_book', {}).get('name', '不明')}</div>
            </div>
        </div>
        
        <h4>単語帳別カバレッジ</h4>
        {coverage_table}
        """
    
    def _create_grammar_subsection(self, grammar_analysis: Dict) -> str:
        """文法分析サブセクション"""
        if not grammar_analysis:
            return "<h3>📝 文法分析</h3><p>文法分析データがありません。</p>"
        
        summary = grammar_analysis.get('summary', {})
        grammar_items = grammar_analysis.get('grammar_items', {})
        
        # 文法項目テーブル
        grammar_table = "<table class='data-table'><thead><tr><th>文法項目</th><th>出現回数</th><th>頻度(/100語)</th><th>難易度</th></tr></thead><tbody>"
        
        for name, data in grammar_items.items():
            if data.get('count', 0) > 0:
                grammar_table += f"""
                <tr>
                    <td>{name}</td>
                    <td>{data.get('count', 0)}</td>
                    <td>{data.get('frequency_per_100_words', 0):.2f}</td>
                    <td>{data.get('difficulty_level', 'basic')}</td>
                </tr>
                """
        
        grammar_table += "</tbody></table>"
        
        return f"""
        <h3>📝 文法分析</h3>
        <div class="metric-grid">
            <div class="metric-card">
                <div class="metric-label">文法項目数</div>
                <div class="metric-value">{summary.get('total_grammar_items', 0)}</div>
            </div>
            <div class="metric-card">
                <div class="metric-label">文法密度</div>
                <div class="metric-value">{summary.get('grammar_density', 0):.1f}%</div>
            </div>
            <div class="metric-card">
                <div class="metric-label">複雑度レベル</div>
                <div class="metric-value">{summary.get('complexity_level', '不明')}</div>
            </div>
        </div>
        
        <h4>文法項目出現状況</h4>
        {grammar_table}
        """
    
    def _create_sentence_subsection(self, sentence_analysis: Dict) -> str:
        """文構造分析サブセクション"""
        if not sentence_analysis:
            return "<h3>🔗 文構造分析</h3><p>文構造分析データがありません。</p>"
        
        basic_stats = sentence_analysis.get('basic_statistics', {})
        complexity = sentence_analysis.get('complexity_analysis', {})
        readability = sentence_analysis.get('readability_scores', {})
        
        return f"""
        <h3>🔗 文構造分析</h3>
        <div class="metric-grid">
            <div class="metric-card">
                <div class="metric-label">総文数</div>
                <div class="metric-value">{basic_stats.get('total_sentences', 0)}</div>
            </div>
            <div class="metric-card">
                <div class="metric-label">平均文長</div>
                <div class="metric-value">{basic_stats.get('avg_words_per_sentence', 0):.1f}語</div>
            </div>
            <div class="metric-card">
                <div class="metric-label">複雑度</div>
                <div class="metric-value">{complexity.get('complexity_level', '不明')}</div>
            </div>
            <div class="metric-card">
                <div class="metric-label">読みやすさ</div>
                <div class="metric-value">{readability.get('reading_level', '不明')}</div>
            </div>
        </div>
        """
    
    def _create_recommendations_section(self, report: Dict) -> str:
        """推奨事項セクションの作成"""
        study_recommendations = report.get('study_recommendations', {})
        
        if not study_recommendations:
            return "<section class='section'><h2>💡 学習推奨事項</h2><p>推奨事項データがありません。</p></section>"
        
        sections = ""
        
        for area, recommendations in study_recommendations.items():
            if recommendations:
                area_name = {
                    'priority_areas': '優先学習分野',
                    'vocabulary_study': '語彙学習',
                    'grammar_study': '文法学習',
                    'reading_strategy': '読解戦略'
                }.get(area, area)
                
                sections += f"""
                <h3>{area_name}</h3>
                <ul class="recommendation-list">
                """
                
                for rec in recommendations:
                    sections += f"<li>{rec}</li>"
                
                sections += "</ul>"
        
        return f"""
        <section class="section">
            <h2>💡 学習推奨事項</h2>
            {sections}
        </section>
        """
    
    def _create_action_plan_section(self, report: Dict) -> str:
        """アクションプランセクションの作成"""
        action_plan = report.get('action_plan', {})
        
        if not action_plan:
            return "<section class='section'><h2>🎯 アクションプラン</h2><p>アクションプランデータがありません。</p></section>"
        
        schedule = action_plan.get('study_schedule', {})
        immediate_actions = action_plan.get('immediate_actions', [])
        
        return f"""
        <section class="section">
            <h2>🎯 アクションプラン</h2>
            
            <h3>📅 学習スケジュール</h3>
            <div class="metric-grid">
                <div class="metric-card">
                    <div class="metric-label">推奨学習期間</div>
                    <div class="metric-value">{schedule.get('recommended_study_period', '不明')}</div>
                </div>
                <div class="metric-card">
                    <div class="metric-label">1日の学習時間</div>
                    <div class="metric-value">{schedule.get('daily_study_time', '不明')}</div>
                </div>
            </div>
            
            <h3>⚡ 即座に取り組むべき項目</h3>
            <ul class="recommendation-list">
            {''.join(f'<li>{action}</li>' for action in immediate_actions)}
            </ul>
        </section>
        """
    
    def _format_challenges(self, challenges: List[str]) -> str:
        """課題リストのフォーマット"""
        if not challenges:
            return "<p>特に大きな課題は見つかりませんでした。</p>"
        
        formatted = ""
        for challenge in challenges:
            formatted += f'<div class="challenge-box">{challenge}</div>'
        
        return formatted
    
    def _generate_json_report(self, analysis_result: Dict, output_path: Path) -> bool:
        """JSONレポートの生成"""
        try:
            with open(output_path.with_suffix('.json'), 'w', encoding='utf-8') as f:
                json.dump(analysis_result, f, ensure_ascii=False, indent=2)
            
            logger.info(f"JSONレポートを生成しました: {output_path.with_suffix('.json')}")
            return True
            
        except Exception as e:
            logger.error(f"JSONレポート生成エラー: {e}")
            return False
    
    def _generate_csv_report(self, analysis_result: Dict, output_path: Path) -> bool:
        """CSVレポートの生成"""
        try:
            # 語彙分析結果をCSVに変換
            vocab_analysis = analysis_result.get('vocabulary_analysis', {})
            coverage = vocab_analysis.get('vocabulary_coverage', {})
            
            if coverage:
                csv_data = []
                for book_name, data in coverage.items():
                    csv_data.append({
                        '単語帳': book_name,
                        '語彙カバレッジ率(%)': data.get('vocabulary_coverage_rate', 0),
                        '単語帳使用率(%)': data.get('vocabulary_utilization_rate', 0),
                        '一致語数': data.get('matched_words_count', 0),
                        '単語帳総語数': data.get('target_total_words', 0)
                    })
                
                df = pd.DataFrame(csv_data)
                df.to_csv(output_path.with_suffix('.csv'), index=False, encoding='utf-8-sig')
                
                logger.info(f"CSVレポートを生成しました: {output_path.with_suffix('.csv')}")
                return True
            else:
                logger.warning("CSV出力用のデータが不足しています")
                return False
                
        except Exception as e:
            logger.error(f"CSVレポート生成エラー: {e}")
            return False
    
    def _generate_text_report(self, analysis_result: Dict, output_path: Path) -> bool:
        """テキストレポートの生成"""
        try:
            assessment = analysis_result.get('comprehensive_assessment', {})
            report = analysis_result.get('integrated_report', {})
            
            text_content = f"""
{self.config.title}
{'=' * len(self.config.title)}

生成日時: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
作成者: {self.config.author}

エグゼクティブサマリー
------------------
総合難易度: {assessment.get('difficulty_level', '不明')}
読解レベル: {assessment.get('reading_level', '不明')}
推定読解時間: {assessment.get('estimated_reading_time_minutes', 0)}分
総合スコア: {assessment.get('overall_difficulty_score', 0):.1f}

主要な学習課題:
{self._format_challenges_text(report.get('executive_summary', {}).get('key_challenges', []))}

学習推奨事項:
{self._format_recommendations_text(report.get('study_recommendations', {}))}

詳細分析結果:
{self._format_detailed_analysis_text(analysis_result)}
"""
            
            with open(output_path.with_suffix('.txt'), 'w', encoding='utf-8') as f:
                f.write(text_content)
            
            logger.info(f"テキストレポートを生成しました: {output_path.with_suffix('.txt')}")
            return True
            
        except Exception as e:
            logger.error(f"テキストレポート生成エラー: {e}")
            return False
    
    def _format_challenges_text(self, challenges: List[str]) -> str:
        """課題リストのテキスト形式フォーマット"""
        if not challenges:
            return "特に大きな課題は見つかりませんでした。"
        
        return '\\n'.join(f"  - {challenge}" for challenge in challenges)
    
    def _format_recommendations_text(self, recommendations: Dict) -> str:
        """推奨事項のテキスト形式フォーマット"""
        if not recommendations:
            return "推奨事項がありません。"
        
        formatted = ""
        for area, items in recommendations.items():
            if items:
                area_name = {
                    'priority_areas': '優先学習分野',
                    'vocabulary_study': '語彙学習',
                    'grammar_study': '文法学習',
                    'reading_strategy': '読解戦略'
                }.get(area, area)
                
                formatted += f"\\n{area_name}:\\n"
                formatted += '\\n'.join(f"  - {item}" for item in items)
                formatted += "\\n"
        
        return formatted
    
    def _format_detailed_analysis_text(self, analysis_result: Dict) -> str:
        """詳細分析のテキスト形式フォーマット"""
        sections = []
        
        # 語彙分析
        vocab_analysis = analysis_result.get('vocabulary_analysis', {})
        if vocab_analysis:
            sections.append("語彙分析:")
            text_stats = vocab_analysis.get('text_statistics', {})
            sections.append(f"  - 抽出総単語数: {text_stats.get('total_words', 0):,}")
            sections.append(f"  - ユニーク単語数: {text_stats.get('unique_words', 0):,}")
            
            summary = vocab_analysis.get('summary', {})
            best_book = summary.get('best_coverage_book', {})
            if best_book:
                sections.append(f"  - 最適単語帳: {best_book.get('name', '不明')}")
        
        # 文法分析
        grammar_analysis = analysis_result.get('grammar_analysis', {})
        if grammar_analysis:
            sections.append("\\n文法分析:")
            summary = grammar_analysis.get('summary', {})
            sections.append(f"  - 文法項目数: {summary.get('total_grammar_items', 0)}")
            sections.append(f"  - 文法密度: {summary.get('grammar_density', 0):.1f}%")
            sections.append(f"  - 複雑度レベル: {summary.get('complexity_level', '不明')}")
        
        # 文構造分析
        sentence_analysis = analysis_result.get('sentence_analysis', {})
        if sentence_analysis:
            sections.append("\\n文構造分析:")
            basic_stats = sentence_analysis.get('basic_statistics', {})
            sections.append(f"  - 総文数: {basic_stats.get('total_sentences', 0)}")
            sections.append(f"  - 平均文長: {basic_stats.get('avg_words_per_sentence', 0):.1f}語")
            
            readability = sentence_analysis.get('readability_scores', {})
            sections.append(f"  - 読みやすさ: {readability.get('reading_level', '不明')}")
        
        return '\\n'.join(sections)

def main():
    """テスト用メイン関数"""
    # サンプル分析結果
    sample_result = {
        'metadata': {
            'analysis_timestamp': datetime.datetime.now().isoformat(),
            'text_length': 1000
        },
        'comprehensive_assessment': {
            'difficulty_level': '中',
            'reading_level': '高校標準レベル',
            'estimated_reading_time_minutes': 5,
            'overall_difficulty_score': 65.5
        },
        'integrated_report': {
            'executive_summary': {
                'key_challenges': [
                    '語彙力やや不足: 中級単語の強化が必要',
                    '文法構造が複雑: 中級レベルの文法項目が多用'
                ]
            },
            'study_recommendations': {
                'vocabulary_study': ['Target 1900での学習', '語根学習'],
                'grammar_study': ['関係代名詞の復習', '完了形の練習']
            }
        }
    }
    
    # HTMLレポート生成テスト
    config = ReportConfig(format="html")
    generator = ReportGenerator(config)
    
    output_path = "test_report"
    success = generator.generate_comprehensive_report(sample_result, output_path)
    
    if success:
        print("レポート生成テストが成功しました")
    else:
        print("レポート生成テストが失敗しました")

if __name__ == "__main__":
    main()